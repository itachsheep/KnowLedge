/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>

/* Header for class com_skyworthauto_testjni_TestJni */

#ifndef _Included_com_skyworthauto_testjni_TestJni
#define _Included_com_skyworthauto_testjni_TestJni
#ifdef __cplusplus
extern "C" {
#endif

jint native_funStatic(JNIEnv *env, jclass clazz, jint a, jint b){
    return a + b;
}


jint native_fun__II(JNIEnv *env, jobject thiz, jint a, jint b){
    return a + b;
}

jfloat native_fun__FF(JNIEnv *env, jobject thiz, jfloat a, jfloat b){
    return a + b;
}

jobject native_createObject(JNIEnv *env, jobject thiz){
    jclass targetClass = (env)->FindClass("com/skyworthauto/testjni/JavaObject");
    jmethodID constructId = (env)->GetMethodID(targetClass,"<init>", "(I)V");
    jobject newObject = (env)->NewObject(targetClass, constructId, 999);
    return newObject;

}

jobject native_createObjectAndSet(JNIEnv *env, jobject thiz){
    jclass targetClass = (env)->FindClass("com/skyworthauto/testjni/JavaObject");
    jmethodID constructId = (env)->GetMethodID(targetClass,"<init>", "()V");
    jobject newObject = (env)->NewObject(targetClass, constructId);
    //
    jfieldID fId = (env)->GetFieldID(targetClass, "mNum", "I");
    (env)->SetIntField(newObject, fId, 30);
    jfieldID fIdStatic = (env)->GetStaticFieldID(targetClass, "sNum", "I");
    (env)->SetStaticIntField(targetClass, fIdStatic, 3000);
    return newObject;

}


jint native_getField(JNIEnv *env, jobject thiz){

    jclass targetClass = (env)->FindClass("com/skyworthauto/testjni/JavaObject");
    jmethodID constructId = (env)->GetMethodID(targetClass,"<init>", "()V");
    jobject newObject = (env)->NewObject(targetClass, constructId);
    //
    jfieldID fId = (env)->GetFieldID(targetClass, "mNum", "I");
    jint result = (env)->GetIntField( newObject, fId);
    return result;

}


jint native_getStaticField(JNIEnv *env, jobject thiz){
    jclass targetClass = (env)->FindClass("com/skyworthauto/testjni/JavaObject");
    //
    jfieldID fId = (env)->GetStaticFieldID(targetClass, "sNum", "I");
    jint result = (env)->GetStaticIntField(targetClass, fId);
    return result;
}


jint native_invokeMethod(JNIEnv *env, jobject thiz){

    jclass targetClass = (env)->FindClass("com/skyworthauto/testjni/JavaObject");
    jmethodID constructId = (env)->GetMethodID(targetClass,"<init>", "()V");
    jobject newObject = (env)->NewObject(targetClass, constructId);
    //
    jmethodID mId = (env)->GetMethodID(targetClass,"method", "()I");
    jint result = (env)->CallIntMethod(newObject, mId);
    return result;

}


jint native_invokeStaticMethod(JNIEnv *env, jobject thiz){

    jclass targetClass = (env)->FindClass("com/skyworthauto/testjni/JavaObject");
    //
    jmethodID mId = (env)->GetStaticMethodID(targetClass,"methodStatic", "()I");
    jint result = (env)->CallStaticIntMethod(targetClass, mId);
    return result;
}



JNINativeMethod method[]={

        {"funStatic","(II)I",(void*)native_funStatic},
        {"fun","(II)I",(int*)native_fun__II},
        {"fun","(FF)F",(void*)native_fun__FF},
        {"createObject","()Lcom/skyworthauto/testjni/JavaObject;",(int*)native_createObject},
        {"createObjectAndSet","()Lcom/skyworthauto/testjni/JavaObject;",(void*)native_createObjectAndSet},
        {"getField","()I",(int*)native_getField},
        {"getStaticField","()I",(void*)native_getStaticField},
        {"invokeMethod","()I",(int*)native_invokeMethod},
        {"invokeStaticMethod","()I",(int*)native_invokeStaticMethod},

};

//注册相应的类以及方法
jint registerNativeMethod(JNIEnv *env){
    jclass cl=env->FindClass("com/skyworthauto/testjni/TestJni");
    if((env->RegisterNatives(cl,method,sizeof(method)/sizeof(method[0])))<0){
        return -1;
    }
    return 0;
}

jint JNI_OnLoad(JavaVM* vm, void* reserved) {
    JNIEnv* env = NULL;
    if (vm->GetEnv((void**) &env, JNI_VERSION_1_4) != JNI_OK) {
        return -1;
    }
    if(registerNativeMethod(env)!=JNI_OK){//注册方法
        return -1;
    }
    return JNI_VERSION_1_4;//必须返回这个值
}

#ifdef __cplusplus
}
#endif
#endif
