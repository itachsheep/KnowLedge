/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_skyworthauto_testjni_TestJni */

#ifndef _Included_com_skyworthauto_testjni_TestJni
#define _Included_com_skyworthauto_testjni_TestJni
#ifdef __cplusplus
extern "C" {
#endif

JNIEXPORT jint JNICALL Java_com_skyworthauto_testjni_TestJni_funStatic
        (JNIEnv *env, jclass clazz, jint a, jint b){
    return a + b;
}


JNIEXPORT jint JNICALL Java_com_skyworthauto_testjni_TestJni_fun__II
        (JNIEnv *env, jobject thiz, jint a, jint b){
    return a + b;
}

JNIEXPORT jfloat JNICALL Java_com_skyworthauto_testjni_TestJni_fun__FF
        (JNIEnv *env, jobject thiz, jfloat a, jfloat b){
    return a + b;
}

JNIEXPORT jobject JNICALL Java_com_skyworthauto_testjni_TestJni_createObject
        (JNIEnv *env, jobject thiz){
    jclass targetClass = (env)->FindClass("com/skyworthauto/testjni/JavaObject");
    jmethodID constructId = (env)->GetMethodID(targetClass,"<init>", "(I)V");
    jobject newObject = (env)->NewObject(targetClass, constructId, 999);
    return newObject;

}

JNIEXPORT jobject JNICALL Java_com_skyworthauto_testjni_TestJni_createObjectAndSet
        (JNIEnv *env, jobject thiz){
    jclass targetClass = (env)->FindClass("com/skyworthauto/testjni/JavaObject");
    jmethodID constructId = (env)->GetMethodID(targetClass,"<init>", "()V");
    jobject newObject = (env)->NewObject(targetClass, constructId);
    //
    jfieldID fId = (env)->GetFieldID(targetClass, "mNum", "I");
    (env)->SetIntField(newObject, fId, 30);
    jfieldID fIdStatic = (env)->GetStaticFieldID(targetClass, "sNum", "I");
    (env)->SetStaticIntField(targetClass, fIdStatic, 3000);
    return newObject;

}


JNIEXPORT jint JNICALL Java_com_skyworthauto_testjni_TestJni_getField
        (JNIEnv *env, jobject thiz){

    jclass targetClass = (env)->FindClass("com/skyworthauto/testjni/JavaObject");
    jmethodID constructId = (env)->GetMethodID(targetClass,"<init>", "()V");
    jobject newObject = (env)->NewObject(targetClass, constructId);
    //
    jfieldID fId = (env)->GetFieldID(targetClass, "mNum", "I");
    jint result = (env)->GetIntField( newObject, fId);
    return result;

}


JNIEXPORT jint JNICALL Java_com_skyworthauto_testjni_TestJni_getStaticField
        (JNIEnv *env, jobject thiz){
    jclass targetClass = (env)->FindClass("com/skyworthauto/testjni/JavaObject");
    //
    jfieldID fId = (env)->GetStaticFieldID(targetClass, "sNum", "I");
    jint result = (env)->GetStaticIntField(targetClass, fId);
    return result;
}


JNIEXPORT jint JNICALL Java_com_skyworthauto_testjni_TestJni_invokeMethod
        (JNIEnv *env, jobject thiz){

    jclass targetClass = (env)->FindClass("com/skyworthauto/testjni/JavaObject");
    jmethodID constructId = (env)->GetMethodID(targetClass,"<init>", "()V");
    jobject newObject = (env)->NewObject(targetClass, constructId);
    //
    jmethodID mId = (env)->GetMethodID(targetClass,"method", "()I");
    jint result = (env)->CallIntMethod(newObject, mId);
    return result;

}


JNIEXPORT jint JNICALL Java_com_skyworthauto_testjni_TestJni_invokeStaticMethod
        (JNIEnv *env, jobject thiz){

    jclass targetClass = (env)->FindClass("com/skyworthauto/testjni/JavaObject");
    //
    jmethodID mId = (env)->GetStaticMethodID(targetClass,"methodStatic", "()I");
    jint result = (env)->CallStaticIntMethod(targetClass, mId);
    return result;
}




#ifdef __cplusplus
}
#endif
#endif
